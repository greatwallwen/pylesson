# Python 数字数据类型用于存储数值。
# 数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。
# 以下实例在变量赋值时 Number 对象将被创建：
# var1 = 1
# var2 = 10
# 您也可以使用del语句删除一些数字对象的引用。
# del语句的语法是：
# del var1[,var2[,var3[....,varN]]]
# 您可以通过使用del语句删除单个或多个对象的引用，例如：
# del var
# del var_a, var_b

# >>> number = 0xA0F # 十六进制
# >>> number
# 2575
#
# >>> number=0o37 # 八进制
# >>> number
# 31

# 以下实例将浮点数变量 a 转换为整数：
# >>> a = 1.0
# >>> int(a)
# 1

# Python 数字运算
# Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。
# 表达式的语法很直白： +, -, * 和 /, 和其它语言（如Pascal或C）里一样。例如：
# >>> 2 + 2
# 4
# >>> 50 - 5*6
# 20
# >>> (50 - 5*6) / 4
# 5.0
# >>> 8 / 5  # 总是返回一个浮点数
# 1.6
# 注意：在不同的机器上浮点运算的结果可能会不一样。
# 在整数除法中，除法 / 总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符 // ：
# >>> 17 / 3  # 整数除法返回浮点型
# 5.666666666666667
# >>>
# >>> 17 // 3  # 整数除法返回向下取整后的结果
# 5
# >>> 17 % 3  # ％操作符返回除法的余数
# 2
# >>> 5 * 3 + 2
# 17
# 注意：// 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。
# >>> 7//2
# 3
# >>> 7.0//2
# 3.0
# >>> 7//2.0
# 3.0
# >>>
# 等号 = 用于给变量赋值。赋值之后，除了下一个提示符，解释器不会显示任何结果。
# >>> width = 20
# >>> height = 5*9
# >>> width * height
# 900
# Python 可以使用 ** 操作来进行幂运算：
# >>> 5 ** 2  # 5 的平方
# 25
# >>> 2 ** 7  # 2的7次方
# 128
# 变量在使用前必须先"定义"（即赋予变量一个值），否则会出现错误：
# >>> n   # 尝试访问一个未定义的变量
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'n' is not defined
# 不同类型的数混合运算时会将整数转换为浮点数：
# >>> 3 * 3.75 / 1.5
# 7.5
# >>> 7.0 / 2
# 3.5
# 在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。例如：
# >>> tax = 12.5 / 100
# >>> price = 100.50
# >>> price * tax
# 12.5625
# >>> price + _
# 113.0625
# >>> round(_, 2)
# 113.06
# 此处， _ 变量应被用户视为只读变量。